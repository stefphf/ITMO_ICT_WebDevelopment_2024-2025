{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u041a\u043e\u043c\u043c\u0438\u0442\u044b: \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u0438\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u0438\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u0438\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u0438\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 4","title":"Home"},{"location":"#_1","text":"\u041a\u043e\u043c\u043c\u0438\u0442\u044b: \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u0438\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u0438\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u0438\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u0438\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 4","title":"\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435"},{"location":"report_lr1/","text":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0421\u0435\u0440\u0432\u0435\u0440 import socket s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) print('Socket created') # \u041f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u043a \u0430\u0434\u0440\u0435\u0441\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 HOST = 'localhost' PORT = 8080 s.bind((HOST, PORT)) print('Socket bind complete') while True: message, address = s.recvfrom(1024) print(f\"New message from client: {message.decode()}\") response = 'Hello, UDP Client!' s.sendto(response.encode(), address) print(f\"Message sent to client: {response}\") \u041a\u043b\u0438\u0435\u043d\u0442 import socket s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) HOST = 'localhost' PORT = 8080 address = HOST, PORT message = \"Hi, UDP server!\" s.sendto(message.encode(), address) print(f\"Sent message to server: {message}\") response, server_address = s.recvfrom(1024) print(f\"Got reply from server: {response.decode()}\") s.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 (\u0442\u0435\u043e\u0440\u0435\u043c\u0430 \u043f\u0438\u0444\u0430\u0433\u043e\u0440\u0430), \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0421\u0435\u0440\u0432\u0435\u0440 import socket from math import sqrt s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) HOST = 'localhost' PORT = 8081 address = HOST, PORT s.bind(address) s.listen(1) print(\"Server is running!\") while True: client_connection, client_address = s.accept() print(\"We got connection now\") request = client_connection.recv(1024).decode() try: a, b = map(float, request.split(',')) if a > 0 and b > 0: result = str(sqrt(a**2 + b**2)) else: result = \"Invalid data\" except: result = \"Invalid data\" # \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u043b\u0438 \u043e\u0442\u0432\u0435\u0442 client_connection.sendall(result.encode()) client_connection.close() \u041a\u043b\u0438\u0435\u043d\u0442 import socket # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 client_socket.connect(('localhost', 8081)) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 sides = input(\"Enter lengths of a and b: \") client_socket.sendall(sides.encode()) # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 response = client_socket.recv(1024) print(f'Server response: {response.decode()}') # \u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 client_socket.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0421\u0435\u0440\u0432\u0435\u0440 import socket HOST = 'localhost' PORT = 8082 # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((HOST, PORT)) server_socket.listen(50) print(f\"HTTP \u0441\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 http://{HOST}:{PORT}...\") # HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 html_content = open(\"index.html\", \"r\", encoding=\"utf-8\").read() while True: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client_connection, client_address = server_socket.accept() print(f'\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {client_address}') request = client_connection.recv(1024).decode() print(f'\u0417\u0430\u043f\u0440\u043e\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:\\n{request}') # \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c HTTP-\u043e\u0442\u0432\u0435\u0442 \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u043c\u0438 \u0438 HTML-\u043a\u043e\u043d\u0442\u0435\u043d\u0442\u043e\u043c http_response = ( \"HTTP/1.1 200 OK\\r\\n\" \"Content-Type: text/html; charset=UTF-8\\r\\n\" f\"Content-Length: {len(html_content)}\\r\\n\" \"Connection: close\\r\\n\" \"\\r\\n\" + html_content ) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c HTTP-\u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 client_connection.sendall(http_response.encode()) client_connection.close() HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Web-programming</title> </head> <body> <h1>\u0426\u043e\u0439 \u0421\u0442\u0435\u043f\u0430\u043d K3340</h1> <p> We got new connection!</p> </body> </html> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0421\u0435\u0440\u0432\u0435\u0440 import socket import threading clients = [] def handle_client(client_socket): while True: try: message = client_socket.recv(1024).decode('utf-8') print(f\"\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {client_address}:\") print(message) if message: broadcast(message, client_socket) except: clients.remove(client_socket) client_socket.close() break def broadcast(message, client_socket): for client in clients: if client != client_socket: client.send(message.encode('utf-8')) server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 12366)) server_socket.listen(5) print(\"\u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d...\") while True: client_socket, client_address = server_socket.accept() clients.append(client_socket) print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f {client_address}\") threading.Thread(target=handle_client, args=(client_socket,)).start() \u041a\u043b\u0438\u0435\u043d\u0442 import socket import threading def receive_messages(client_socket): while True: try: message = client_socket.recv(1024).decode('utf-8') if message: print(message) except: client_socket.close() break client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', 12366)) threading.Thread(target=receive_messages, args=(client_socket,)).start() print(\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e. \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435:\") while True: message = input() client_socket.send(message.encode('utf-8')) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 import socket from urllib.parse import unquote_plus grades = [] #\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f html \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 grades def generate_html(): html = \"<html><head><meta charset='UTF-8'><title>\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c</title></head><body>\" html += \"<h1>\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c</h1><ul>\" subjects = {} for grade in grades: subject = grade['subject'] score = grade['score'] if subject in subjects: subjects[subject].append(score) else: subjects[subject] = [score] # \u0412\u044b\u0432\u043e\u0434 \u043e\u0446\u0435\u043d\u043e\u043a for subject, scores in subjects.items(): html += f\"<li>{subject}: {', '.join(scores)}</li>\" html += \"</ul>\" html += ''' <h2>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443</h2> <form method=\"POST\"> <label>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: <input type=\"text\" name=\"subject\"></label><br> <label>\u041e\u0446\u0435\u043d\u043a\u0430: <input type=\"text\" name=\"score\"></label><br> <input type=\"submit\" value=\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c\"> </form> ''' html += \"</body></html>\" return html def parse_post_data(data): post_data = {} params = data.split('&') for param in params: key, value = param.split('=') post_data[key] = unquote_plus(value) return post_data def handle_request(request): headers, _, body = request.partition('\\r\\n\\r\\n') lines = headers.splitlines() request_line = lines[0] method, path, _ = request_line.split() if method == 'GET': response_body = generate_html() response = 'HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=UTF-8\\r\\n\\r\\n' + response_body return response elif method == 'POST': post_data = parse_post_data(body) grades.append({'subject': post_data.get('subject', ''), 'score': post_data.get('score', '')}) response_body = generate_html() response = 'HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=UTF-8\\r\\n\\r\\n' + response_body return response def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) HOST = 'localhost' PORT = 8084 server_socket.bind((HOST, PORT)) server_socket.listen(5) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 http://{HOST}:{PORT}\") while True: client_socket, addr = server_socket.accept() print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 {addr}\") request = client_socket.recv(1024).decode('utf-8') if request: response = handle_request(request) client_socket.sendall(response.encode('utf-8')) client_socket.close() if __name__ == '__main__': start_server()","title":"LAB 1"},{"location":"report_lr1/#no1","text":"","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161"},{"location":"report_lr1/#1","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"report_lr1/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438"},{"location":"report_lr1/#_2","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430"},{"location":"report_lr1/#_3","text":"import socket s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) print('Socket created') # \u041f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u043a \u0430\u0434\u0440\u0435\u0441\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 HOST = 'localhost' PORT = 8080 s.bind((HOST, PORT)) print('Socket bind complete') while True: message, address = s.recvfrom(1024) print(f\"New message from client: {message.decode()}\") response = 'Hello, UDP Client!' s.sendto(response.encode(), address) print(f\"Message sent to client: {response}\")","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"report_lr1/#_4","text":"import socket s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) HOST = 'localhost' PORT = 8080 address = HOST, PORT message = \"Hi, UDP server!\" s.sendto(message.encode(), address) print(f\"Sent message to server: {message}\") response, server_address = s.recvfrom(1024) print(f\"Got reply from server: {response.decode()}\") s.close()","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"report_lr1/#2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"report_lr1/#_5","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 (\u0442\u0435\u043e\u0440\u0435\u043c\u0430 \u043f\u0438\u0444\u0430\u0433\u043e\u0440\u0430), \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438"},{"location":"report_lr1/#_6","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430"},{"location":"report_lr1/#_7","text":"import socket from math import sqrt s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) HOST = 'localhost' PORT = 8081 address = HOST, PORT s.bind(address) s.listen(1) print(\"Server is running!\") while True: client_connection, client_address = s.accept() print(\"We got connection now\") request = client_connection.recv(1024).decode() try: a, b = map(float, request.split(',')) if a > 0 and b > 0: result = str(sqrt(a**2 + b**2)) else: result = \"Invalid data\" except: result = \"Invalid data\" # \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u043b\u0438 \u043e\u0442\u0432\u0435\u0442 client_connection.sendall(result.encode()) client_connection.close()","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"report_lr1/#_8","text":"import socket # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 client_socket.connect(('localhost', 8081)) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 sides = input(\"Enter lengths of a and b: \") client_socket.sendall(sides.encode()) # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 response = client_socket.recv(1024) print(f'Server response: {response.decode()}') # \u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 client_socket.close()","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"report_lr1/#3","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"report_lr1/#_9","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438"},{"location":"report_lr1/#_10","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430"},{"location":"report_lr1/#_11","text":"import socket HOST = 'localhost' PORT = 8082 # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((HOST, PORT)) server_socket.listen(50) print(f\"HTTP \u0441\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 http://{HOST}:{PORT}...\") # HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 html_content = open(\"index.html\", \"r\", encoding=\"utf-8\").read() while True: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client_connection, client_address = server_socket.accept() print(f'\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {client_address}') request = client_connection.recv(1024).decode() print(f'\u0417\u0430\u043f\u0440\u043e\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:\\n{request}') # \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c HTTP-\u043e\u0442\u0432\u0435\u0442 \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u043c\u0438 \u0438 HTML-\u043a\u043e\u043d\u0442\u0435\u043d\u0442\u043e\u043c http_response = ( \"HTTP/1.1 200 OK\\r\\n\" \"Content-Type: text/html; charset=UTF-8\\r\\n\" f\"Content-Length: {len(html_content)}\\r\\n\" \"Connection: close\\r\\n\" \"\\r\\n\" + html_content ) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c HTTP-\u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 client_connection.sendall(http_response.encode()) client_connection.close()","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"report_lr1/#html","text":"<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Web-programming</title> </head> <body> <h1>\u0426\u043e\u0439 \u0421\u0442\u0435\u043f\u0430\u043d K3340</h1> <p> We got new connection!</p> </body> </html>","title":"HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430"},{"location":"report_lr1/#4","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"report_lr1/#_12","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438"},{"location":"report_lr1/#_13","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430"},{"location":"report_lr1/#_14","text":"import socket import threading clients = [] def handle_client(client_socket): while True: try: message = client_socket.recv(1024).decode('utf-8') print(f\"\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {client_address}:\") print(message) if message: broadcast(message, client_socket) except: clients.remove(client_socket) client_socket.close() break def broadcast(message, client_socket): for client in clients: if client != client_socket: client.send(message.encode('utf-8')) server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 12366)) server_socket.listen(5) print(\"\u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d...\") while True: client_socket, client_address = server_socket.accept() clients.append(client_socket) print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f {client_address}\") threading.Thread(target=handle_client, args=(client_socket,)).start()","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"report_lr1/#_15","text":"import socket import threading def receive_messages(client_socket): while True: try: message = client_socket.recv(1024).decode('utf-8') if message: print(message) except: client_socket.close() break client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', 12366)) threading.Thread(target=receive_messages, args=(client_socket,)).start() print(\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e. \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435:\") while True: message = input() client_socket.send(message.encode('utf-8'))","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"report_lr1/#5","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"report_lr1/#_16","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u0447\u0438"},{"location":"report_lr1/#_17","text":"import socket from urllib.parse import unquote_plus grades = [] #\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f html \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 grades def generate_html(): html = \"<html><head><meta charset='UTF-8'><title>\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c</title></head><body>\" html += \"<h1>\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c</h1><ul>\" subjects = {} for grade in grades: subject = grade['subject'] score = grade['score'] if subject in subjects: subjects[subject].append(score) else: subjects[subject] = [score] # \u0412\u044b\u0432\u043e\u0434 \u043e\u0446\u0435\u043d\u043e\u043a for subject, scores in subjects.items(): html += f\"<li>{subject}: {', '.join(scores)}</li>\" html += \"</ul>\" html += ''' <h2>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443</h2> <form method=\"POST\"> <label>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: <input type=\"text\" name=\"subject\"></label><br> <label>\u041e\u0446\u0435\u043d\u043a\u0430: <input type=\"text\" name=\"score\"></label><br> <input type=\"submit\" value=\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c\"> </form> ''' html += \"</body></html>\" return html def parse_post_data(data): post_data = {} params = data.split('&') for param in params: key, value = param.split('=') post_data[key] = unquote_plus(value) return post_data def handle_request(request): headers, _, body = request.partition('\\r\\n\\r\\n') lines = headers.splitlines() request_line = lines[0] method, path, _ = request_line.split() if method == 'GET': response_body = generate_html() response = 'HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=UTF-8\\r\\n\\r\\n' + response_body return response elif method == 'POST': post_data = parse_post_data(body) grades.append({'subject': post_data.get('subject', ''), 'score': post_data.get('score', '')}) response_body = generate_html() response = 'HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=UTF-8\\r\\n\\r\\n' + response_body return response def start_server(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) HOST = 'localhost' PORT = 8084 server_socket.bind((HOST, PORT)) server_socket.listen(5) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 http://{HOST}:{PORT}\") while True: client_socket, addr = server_socket.accept() print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 {addr}\") request = client_socket.recv(1024).decode('utf-8') if request: response = handle_request(request) client_socket.sendall(response.encode('utf-8')) client_socket.close() if __name__ == '__main__': start_server()","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430"},{"location":"report_lr2/","text":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21162 \u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. - \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d \u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043d\u0435\u0442) \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django- admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u041d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u043f\u043e \u0441\u0430\u0439\u0442\u0443 + / + /conferences?arhcive + /id + /register + /propose_speach + /registrations + /id + /delete + /comment + /performances /id /edit /delete +- /account + /login + /register + /logout /admin \u0417\u0430\u043f\u0443\u0441\u043a python manage.py runserver localhost:8080","title":"LAB 2"},{"location":"report_lr2/#no2","text":"","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21162"},{"location":"report_lr2/#_1","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u0434\u043b\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0439. - \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u043e\u0432\u0430\u043d \u043a \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0438\u043b\u0438 \u043d\u0435\u0442) \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django- admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f\u043c.","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439"},{"location":"report_lr2/#_2","text":"","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u0430"},{"location":"report_lr2/#_3","text":"+ / + /conferences?arhcive + /id + /register + /propose_speach + /registrations + /id + /delete + /comment + /performances /id /edit /delete +- /account + /login + /register + /logout /admin","title":"\u041d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044f \u043f\u043e \u0441\u0430\u0439\u0442\u0443"},{"location":"report_lr2/#_4","text":"python manage.py runserver localhost:8080","title":"\u0417\u0430\u043f\u0443\u0441\u043a"},{"location":"report_lr3/","text":"","title":"LAB 3"},{"location":"report_lr4/","text":"","title":"LAB 4"}]}